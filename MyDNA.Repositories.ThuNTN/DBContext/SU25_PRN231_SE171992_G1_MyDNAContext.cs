// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using MyDNA.Repositories.ThuNTN.Models;

namespace MyDNA.Repositories.ThuNTN.DBContext;

public partial class SU25_PRN231_SE171992_G1_MyDNAContext : DbContext
{
    public SU25_PRN231_SE171992_G1_MyDNAContext()
    {
    }

    public SU25_PRN231_SE171992_G1_MyDNAContext(DbContextOptions<SU25_PRN231_SE171992_G1_MyDNAContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<SystemUserAccount> SystemUserAccounts { get; set; }

    public virtual DbSet<TestOrdersThuNtn> TestOrdersThuNtns { get; set; }

    public virtual DbSet<TestResultsThuNtn> TestResultsThuNtns { get; set; }


    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=LAPTOP-CISARH9R;Initial Catalog=SU25_PRN231_SE171992_G1_MyDNA;Persist Security Info=True;User ID=sa;Password=12345678;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__accounts__B9BE370F2AFA56DB");

            entity.ToTable("accounts");

            entity.HasIndex(e => e.Email, "UQ__accounts__AB6E616408C4B2D7").IsUnique();

            entity.HasIndex(e => e.Username, "UQ__accounts__F3DBC572B1FE78A5").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.DateOfBirth).HasColumnName("date_of_birth");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("full_name");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .HasColumnName("gender");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .HasColumnName("phone");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("username");
        });

        modelBuilder.Entity<SystemUserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId);

            entity.ToTable("System.UserAccount");

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.EmployeeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestCode).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TestOrdersThuNtn>(entity =>
        {
            entity.HasKey(e => e.TestOrderThuNtnid).HasName("PK__TestOrde__3E417B671C51CCFE");

            entity.ToTable("TestOrdersThuNTN");

            entity.Property(e => e.TestOrderThuNtnid).HasColumnName("testOrderThuNTNID");
            entity.Property(e => e.AppointmentAt)
                .HasColumnType("datetime")
                .HasColumnName("appointment_at");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.IsResultOnline)
                .HasDefaultValue(true)
                .HasColumnName("is_result_online");
            entity.Property(e => e.Location).HasColumnName("location");
            entity.Property(e => e.SampleMethod)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("sample_method");
            entity.Property(e => e.ServiceType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("service_type");
            entity.Property(e => e.Status)
                .HasMaxLength(30)
                .HasDefaultValue("pending")
                .HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.TestOrdersThuNtns)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_TestOrder_User");
        });

        modelBuilder.Entity<TestResultsThuNtn>(entity =>
        {
            entity.HasKey(e => e.TestResultThuNtnid).HasName("PK__test_res__744E81E401C701AA");

            entity.ToTable("test_results_ThuNTN");

            entity.Property(e => e.TestResultThuNtnid).HasColumnName("testResultThuNTNID");
            entity.Property(e => e.CompletedAt)
                .HasColumnType("datetime")
                .HasColumnName("completed_at");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.IssuedBy)
                .HasMaxLength(100)
                .HasColumnName("issued_by");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.ResultDetail).HasColumnName("result_detail");
            entity.Property(e => e.ResultFileUrl).HasColumnName("result_file_url");
            entity.Property(e => e.ResultStatus)
                .HasMaxLength(50)
                .HasDefaultValue("waiting")
                .HasColumnName("result_status");
            entity.Property(e => e.ResultSummary).HasColumnName("result_summary");
            entity.Property(e => e.ResultVersion)
                .HasDefaultValue(1)
                .HasColumnName("result_version");

            entity.HasOne(d => d.Order).WithMany(p => p.TestResultsThuNtns)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_TestResult_Order");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}