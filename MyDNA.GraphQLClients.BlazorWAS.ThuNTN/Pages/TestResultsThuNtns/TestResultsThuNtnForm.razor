  @using Microsoft.AspNetCore.Authorization

  @page "/TestResultsThuNtnForm/{Id:int?}"
    @attribute [Authorize(Roles = "1,2")]

  @using MyDNA.GraphQLClients.BlazorWAS.ThuNTN.Models
  @inject NavigationManager Navigation
  @inject MyDNA.GraphQLClients.BlazorWAS.ThuNTN.GraphQLClients.GraphQLConsumer _graphQLConsumer

  <h3 class="mb-3">Create New Test Result</h3>

  <EditForm Model="testResult" OnValidSubmit="HandleValidSubmit">
      <DataAnnotationsValidator />

      <div class="mb-3">
          <label class="form-label">Order ID</label>
          <InputNumber class="form-control" @bind-Value="testResult.OrderId" />
      </div>

      <div class="mb-3">
          <label class="form-label">Result Version</label>
          <InputNumber class="form-control" @bind-Value="testResult.ResultVersion" />
      </div>

      <div class="mb-3">
          <label class="form-label">Result Summary</label>
          <InputText class="form-control" @bind-Value="testResult.ResultSummary" />
      </div>

      <div class="mb-3">
          <label class="form-label">Result Detail</label>
          <InputTextArea class="form-control" @bind-Value="testResult.ResultDetail" />
      </div>

      <div class="mb-3">
          <label class="form-label">Result File URL</label>
          <InputText class="form-control" @bind-Value="testResult.ResultFileUrl" />
      </div>

      <div class="mb-3">
          <label class="form-label">Issued By</label>
          <InputText class="form-control" @bind-Value="testResult.IssuedBy" />
      </div>

    <div class="mb-3">
        <label class="form-label">Result Status</label>
        <InputSelect class="form-control" @bind-Value="testResult.ResultStatus">
            <option value="">-- Chọn trạng thái --</option>
            <option value="approved">Approved</option>
            <option value="pending">Pending</option>
            <option value="Chờ xử lý">Chờ xử lý</option>
        </InputSelect>
    </div>


      <div class="mb-3">
          <label class="form-label">Completed At</label>
          <InputDate class="form-control" @bind-Value="testResult.CompletedAt" />
      </div>

      <div class="mb-3">
          <label class="form-label">Created At</label>
          <InputDate class="form-control" @bind-Value="testResult.CreatedAt" />
      </div>

      <button type="submit" class="btn btn-primary me-2">Submit</button>
      <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancel</button>
  </EditForm>

@code {
    private TestResultsThuNtn testResult = new();
    private List<TestResultsThuNtn> allTestResults;

    // đây là phần cho update
    [Parameter]
    public int? Id { get; set; }

    private bool isEditMode => Id.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (isEditMode)
        {
            try
            {
                // Gọi API để lấy dữ liệu testResult theo ID
                var result = await _graphQLConsumer.getTestResultById(Id.Value);
                if (result != null)
                {
                    testResult = result;
                }
                else
                {
                    Console.WriteLine($"Không tìm thấy bản ghi với ID: {Id}");
                    Navigation.NavigateTo("/TestResultsThuNtnList");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Lỗi khi lấy dữ liệu bản ghi: " + ex.Message);
            }
        }
    }



    private async Task HandleValidSubmit()
    {
        try
        {
            if (isEditMode)
            {
                //Update
                int updated = await _graphQLConsumer.UpdateTestResultThuNtn(testResult);
                if (updated > 0 )
                {
                    Console.WriteLine($"Đã cập nhật bản ghi ID: {testResult.TestResultThuNtnid}");
                    Navigation.NavigateTo("/TestResultsThuNtnList");
                }
                else
                {
                    Console.WriteLine("Cập nhật thất bại.");
                }
            }
            else
            {
                // Create
                int newId = await _graphQLConsumer.CreateTestResultThuNtn(testResult);
                if (newId > 0)
                {
                    Console.WriteLine($"Tạo bản ghi mới với ID: {newId}");
                    Navigation.NavigateTo("/TestResultsThuNtnList");
                }
                else
                {
                    Console.WriteLine("Không tạo được bản ghi.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi khi gửi dữ liệu: " + ex.Message);
        }
    }


      private void GoBack()
      {
          Navigation.NavigateTo("/TestResultsThuNtnList");
      }

  


}
 